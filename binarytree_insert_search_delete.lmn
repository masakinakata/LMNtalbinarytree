/*
	node(parent, item, left, right) <=> node(P, Y, L, R)
	X and Y are number.
	nil is empty node.
	P is parent and C is child.
*/

function = {
	// initialize
	head(nil). 
	output={}.
	// insert function 
	insert(X), head(Y) :- head(insert(X,Y)).
	insert(X, C, P), node(C, Y, L, R) :- X < Y | insert(X, L, C), node(P, Y, C, R), .
	insert(X, C, P), node(C, Y, L, R) :- X >= Y | insert(X, R, C), node(P, Y, L, C).
	insert(X, nil, P) :- node(P, X, nil, nil).
	
	// search function
	search(X), head(Y) :- head(search(X,Y)).
	search(X, C, P), node(C, Y, L, R) :- X < Y | search(X, L, C), node(P, Y, C, R).
	search(X, C, P), node(C, Y, L, R) :- X > Y | search(X, R, C), node(P, Y, L, C).
	search(X, C, P), node(C, Y, L, R), output={$p, @rule} :- X =:= Y, int(X)| node(P, Y, L, R), output={$p, @rule, true_search(X)}.
	search(X, nil, P), output={$p, @rule} :- int(X) | nil(P), output={$p, @rule, false_search(X)}.
	
	// delete function
	delete(X), head(Y) :- head(delete(X,Y)).
	delete(X, C, P), node(C, Y, L, R) :- X < Y | delete(X, L, C), node(P, Y, C, R).
	delete(X, C, P), node(C, Y, L, R) :- X > Y | delete(X, R, C), node(P, Y, L, C).
	delete(X, C, P), node(C, Y, nil, nil), output={$p, @rule} :- X =:= Y, int(X)| nil(P),output={$p, @rule, true_delete(X)}.
	delete(X, C, P), node(C, Y, L, nil), node(L, Z, L1, R1), output={$p, @rule} :- X =:= Y, int(X) | node(P, Z, L1, R1), output={$p, @rule, true_delete(X)}.
	delete(X, C, P), node(C, Y, nil, R), node(R, Z, L1, R1), output={$p, @rule} :- X =:= Y, int(X) | node(P, Z, L1, R1), output={$p, @rule, true_delete(X)}.
	delete(X, C, P), node(C, Y, L, R), node(L, Z, L1, R1), node(R, W, L2, R2) :- X =:=Y | delete_changer(P, Y, L, R), node(L, Z, L1, R1), delete_min(R, W, L2, R2).
	delete_changer(P, X, L, R), node(C, Y, L1, R1), delete_min(L1, Z, nil, R2), output={$p, @rule} :- int(X)| node(P, Z, L, R), node(C, Y, R2, R1), output={$p, @rule, true_delete(X)}.
	delete_changer(P, X, L, R), delete_min(R, Y, nil, R2), output={$p, @rule} :- int(X) | node(P, Y, L, R2), output={$p, @rule, true_delete(X)}.
	delete_min(P, X, L, R), node(L, Y, L1, R1) :- node(P, X, L, R), delete_min(L, Y, L1, R1).
	delete(X,nil,P), output={$p, @rule} :- int(X) | nil(P), output={$p, @rule, false_delete(X)}.
}.

// pre-processing for serial execution
exec.
inputlist=[], exec, function={$p, @rule}/ :- $p, @rule.
seqlist=[],function={$p, @rule}/ :- exec,function={$p, @rule}.
inputlist=[seqlist=H|T2], exec, function={$p, @rule}/ :- seqlist=H, inputlist=T2, function={$p, @rule}.


// parallel process execution
inputlist=[insert(N)|T],function={$p, @rule}, exec :- int(N) | inputlist=T, function={$p, insert(N), @rule}, exec.
inputlist=[search(N)|T],function={$p, @rule}, exec :- int(N) | inputlist=T, function={$p, search(N), @rule}, exec.
inputlist=[delete(N)|T],function={$p, @rule}, exec :- int(N) | inputlist=T, function={$p, delete(N), @rule}, exec.

// serial process execution
seqlist=[insert(N)|T], function={$p, @rule}/ :- int(N) | seqlist=T, function={$p, insert(N), @rule}.
seqlist=[search(N)|T], function={$p, @rule}/ :- int(N) | seqlist=T, function={$p, search(N), @rule}.
seqlist=[delete(N)|T], function={$p, @rule}/ :- int(N) | seqlist=T, function={$p, delete(N), @rule}.


// input string (function, atom , ... etc)
inputlist = [
	seqlist=[
		insert(2),
		insert(1),
		insert(5),
		insert(6),
		insert(4),
		insert(3),
		insert(10)
	],
	search(2),
	search(10),
	search(13),
	seqlist=[
		insert(13)
	],
	search(13),
	seqlist=[
		delete(2),
		delete(2),
		delete(10)
	]
].
